{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACC,mCADDA,EAEE,0CAiEOC,MA/Df,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAiC,oBAAfF,EAAQG,MAAuBH,EAAQG,KAAKC,KAAK,GAAM,WAAmB,MAAjG,SACA,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OACZC,YAAY,gBACZJ,UAAU,aACVK,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WArCO,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJnB,EAAS,IACTE,EAAWiB,WAiCgB,oBAAhBlB,EAAQG,KACf,gCACE,sBAAKD,UAAU,sBAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQmB,KAAnC,KAA2CnB,EAAQoB,IAAIC,WACvD,qBAAKnB,UAAU,OAAf,SA/BM,SAACoB,GACnB,IAKIC,EAHO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAGzDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPQ,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OACvD,SAAS,YAAY,UAAU,WAAW,YAM/BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoBCE,CAAY,IAAIC,WAEzC,sBAAK9B,UAAU,qBAAf,UACE,sBAAKA,UAAU,OAAf,UAAuB+B,KAAKC,MAAMlC,EAAQG,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAI9C,WClDAgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1c7a26c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api ={\n  key: \"a229595aedecb9153c053b3eb331b952\",\n  base: \"http://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt =>{\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setQuery('');\n        setWeather(result)});\n    }\n  }\n\n\n\n  const dateBuilder = (d)=>{\n    let months= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n            \"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className={typeof weather.main !=\"undefined\" ? ((weather.main.temp>17) ? 'app warm':'app'): 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\"\n          placeholder=\"Search.......\"\n          className=\"search-bar\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search} />\n        </div>\n          {(typeof weather.main != \"undefined\") ? (\n            <div>\n              <div className=\"location-box center\">\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box center\">\n                <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n                \n              </div>\n            </div>\n          ) : ('')}\n      </main>\n    </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}